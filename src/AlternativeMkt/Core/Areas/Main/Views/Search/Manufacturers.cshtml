@inject ServerConfig config
@using AlternativeMkt.Db
@model SearchItemPrices

@{
    double currentPage = (Model.Query.start + 1) / Model.Query.count + 1;
    int next =  Model.Query.start + Model.Query.count;
    int previous =  Model.Query.start - Model.Query.count;
}

<section class="row mb-4">
    <div class="col-2">
        @{
            if (@Model.Item.Asset != null) {
                <img src=@config.AssetsUrl/@Model.Item.Asset.Endpoint class="img-thumbnail" width="180" height="180"/>
            }
        }
        
    </div>
    <div class="col-6">
        <h5 class="card-title">@Model.Item.Name</h5>
        Level: @Model.Item.Level
        <div>
            @foreach(var itemAttribute in Model.Item.Attributes) {
                <span class="badge bg-warning">
                    @itemAttribute.Attribute.Name - @itemAttribute.Value
                </span>
            }
        </div>
    </div>
    <div class="col-auto">
        <form method="get" asp-action="Manufacturers" asp-route-itemId=@Model.Item.Id>
            <div class="mb-1">
                @{
                    if (Model.Query.serverId is null) {
                        <vc:server-selection name="serverId" hasoptionany="y" />
                    } else {
                        <vc:server-selection name="serverId" hasoptionany="y" selected="@((int)Model.Query.serverId)" />
                    }
                }
            </div>
            <div class="mb-1">
                <input class="form-check-input" type="checkbox" name="orderByCraftPrice" id="orderByCraftPrice" checked="@Model.Query.orderByCraftPrice">
                <label class="form-check-label" for="orderByCraftPrice">Order by craft price</label>
            </div>
            <input class="form-control btn-success" type="submit" value="Apply" />
            <input type="hidden" value="@Model.Item.Id" name="itemId" />
        </form>
    </div>
</section>
<section class="row">
    @foreach (CraftItemsPrice itemPrice in Model.Prices.Data)
    {
        <div class="col mb-2">
            <a
                class="list-group-item list-group-item-action"
                asp-controller="Request"
                asp-action="Open" 
                asp-route-id="@itemPrice.Id"
                asp-route-manufacturerId="@itemPrice.ManufacturerId"
            >
                <p>Server: @itemPrice.Manufacturer.Server.Name</p>
                <p>
                    Manufacturer: 
                    @string.Join(
                        ", ", 
                        itemPrice.Manufacturer.Server.GameAccounts.Select(a => a.Name)
                    )
                </p>
                @{
                    if (Model.Query.orderByCraftPrice) {
                        <p>
                            Total Price: @itemPrice.TotalPrice
                            <b>Craft Price: @itemPrice.Price</b> 
                        </p>
                    } else {
                        <p>
                            <b>Total Price: @itemPrice.TotalPrice</b> 
                            Craft Price: @itemPrice.Price
                        </p>
                    }
                }
            </a>
        </div>
    }
</section>
<section class="row justify-content-center">
    <div class="col-auto">
        @{
            Dictionary<string, string> paginationParams = Model.Query.GetType()
                .GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public)
                .ToDictionary(p => p.Name, p => {
                    var propValue = p.GetValue(Model.Query, null);
                    if (propValue is null)
                        return "";
                    string? value = propValue.ToString();
                    if (string.IsNullOrEmpty(value))
                        return "";
                    return value;
                });
        }
        @await Component.InvokeAsync("Pagination", new {
            start = Model.Query.start,
            count = Model.Query.count,
            total = Model.Prices.Total,
            query = paginationParams
        })
    </div>
</section>
<section class="row justify-content-center">
    <div class="col-auto">
        @Model.Prices.Total crafters found for "@Model.Item.Name".
    </div>
</section>
